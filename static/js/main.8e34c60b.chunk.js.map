{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["INITIAL_STATE","name","phone","ContactForm","onFindName","onAddContact","useState","state","setState","handleChange","target","value","prevState","reset","className","onSubmit","evt","preventDefault","toast","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","id","uuidv4","error","htmlFor","type","onChange","ContactList","contacts","removeContactId","map","onClick","Filter","filter","onFilter","defaultProps","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","useEffect","setItem","stringify","App","setFilter","setContacts","console","log","filterContacts","useMemo","contact","toLowerCase","startsWith","find","newContact","prevContacts","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.8e34c60b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './ContactForm.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    name:\"\",\r\n    phone:\"\"\r\n}\r\n\r\nexport default function ContactForm({ onFindName, onAddContact }) {\r\n\r\n    const [state, setState] = useState({...INITIAL_STATE})\r\n    const {name, phone} = state;\r\n\r\n\r\n    const handleChange = ({target}) => {\r\n        const { name, value } = target;\r\n        \r\n        setState(prevState => ({...prevState, [name]:value}))\r\n    }\r\n\r\n    const handleSubmit = evt =>{\r\n        evt.preventDefault();\r\n\r\n\r\n        if(!name || !phone){\r\n            toast.error(\"Name or phone filed is empty.\", {\r\n                position: \"top-left\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return false; \r\n        }\r\n\r\n        if( onFindName(name) != null){\r\n            toast.warn(name + ' is already in contacts.', {\r\n                position: \"top-left\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return false;\r\n        }\r\n\r\n        onAddContact({id:uuidv4(), name:name, phone:phone});\r\n\r\n        reset();\r\n    }\r\n\r\n\r\n    const reset = () => {\r\n        setState({ ...INITIAL_STATE });\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <form className=\"phonebook\" onSubmit={handleSubmit}>\r\n            <label htmlFor=\"name_1\">Name</label><br/>\r\n            <input type=\"text\" name=\"name\" id=\"name_1\" value={name} onChange={handleChange}/>\r\n            <br/>\r\n            <label htmlFor=\"phone_1\">Number</label><br/>\r\n            <input type=\"tel\" name=\"phone\" id=\"phone_1\" value={phone} onChange={handleChange}/>\r\n            <br/>\r\n            <br/>\r\n            <button type=\"submit\">Add contact</button>\r\n        </form>\r\n        <ToastContainer />\r\n        </>\r\n\r\n    );\r\n    \r\n}\r\n\r\nContactForm.defaultProps = {\r\n    contacts:[],\r\n    onFindName:()=>{}, \r\n    onAddContact:()=>{}\r\n}\r\n\r\nContactForm.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onFindName:PropTypes.func, \r\n    onAddContact:PropTypes.func\r\n}\r\n\r\n// export default class ContactForm extends Component{\r\n\r\n//     state={\r\n//         ...INITIAL_STATE\r\n//     }\r\n\r\n//     handleChange = ({target}) => {\r\n//         const { name, value } = target;\r\n//         this.setState({ [name] : value })\r\n//     }\r\n\r\n//     handleSubmit = evt => {\r\n//         evt.preventDefault();\r\n\r\n//         const { onFindName, onAddContact } = this.props;\r\n//         const { name, phone } = this.state;\r\n\r\n//         if(!name || !phone){\r\n//             alert('Name or phone filed is empty.');\r\n//             return false; \r\n//         }\r\n\r\n//         if( onFindName(name) != null){\r\n//             alert(name + ' is already in contacts.');\r\n//             return false;\r\n//         }\r\n\r\n\r\n//         onAddContact({id:uuidv4(), name:name, phone:phone});\r\n\r\n//         this.reset();\r\n\r\n//     }\r\n\r\n//     validName = (name) => {\r\n//         const { contacts } = this.props;\r\n//         return contacts.filter((contact) => {\r\n//             return contact.name === name\r\n//         })\r\n//     }\r\n\r\n//     reset = () => {\r\n//         this.setState({ ...INITIAL_STATE });\r\n//     };\r\n\r\n//     render(){\r\n\r\n//         const { name, phone } = this.state;\r\n//         return (\r\n            \r\n//             <form className=\"phonebook\" onSubmit={this.handleSubmit}>\r\n//                 <label htmlFor=\"name_1\">Name</label><br/>\r\n//                 <input type=\"text\" name=\"name\" id=\"name_1\" value={name} onChange={this.handleChange}/>\r\n//                 <br/>\r\n//                 <label htmlFor=\"phone_1\">Number</label><br/>\r\n//                 <input type=\"tel\" name=\"phone\" id=\"phone_1\" value={phone} onChange={this.handleChange}/>\r\n//                 <br/>\r\n//                 <br/>\r\n//                 <button type=\"submit\">Add contact</button>\r\n//             </form>\r\n\r\n//         );\r\n\r\n//     }\r\n// }","import React from 'react';\r\nimport  PropTypes from 'prop-types';\r\n\r\nexport default function ContactList({ contacts, removeContactId }){\r\n    return(\r\n            <ul>\r\n                {\r\n                    contacts.map(({id, name, phone}) => (\r\n                        <li key={id}><span> {name}: {phone} </span><button onClick={()=>{removeContactId(id)}}>Delete</button> </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n    )\r\n}\r\n\r\nContactList.defaultProps = {\r\n    contacts:[],\r\n    removeContactId:() =>{}\r\n}\r\nContactList.propTypes = {\r\n    contacts:PropTypes.array.isRequired,\r\n    removeContactId:PropTypes.func\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function Filter({filter, onFilter}) {\r\n    \r\n    const handleChange = ({target}) => {\r\n        onFilter(target.value);\r\n    }\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"filter_1\">Find contacts by name</label><br/>\r\n            <input type=\"text\" name=\"filter\" id=\"filter_1\" value={filter}  onChange={handleChange} />\r\n        </form>\r\n    );\r\n}\r\n\r\nFilter.defaultProps = {\r\n    filter:'',\r\n    onFilter:()=>{}\r\n}\r\nFilter.propTypes = {\r\n    filter:PropTypes.string.isRequired,\r\n    onFilter:PropTypes.func\r\n}","import { useEffect, useState } from \"react\"\r\n\r\n\r\nconst useLocalStorage = (key, defaultValue) =>{\r\n    const [state, setState] = useState(()=>{\r\n        return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue\r\n    })\r\n\r\n    useEffect(()=>{\r\n        window.localStorage.setItem(key, JSON.stringify(state))\r\n    }, [key, state])\r\n\r\n    return [state, setState]\r\n}\r\n\r\nexport default useLocalStorage;","import React, { useMemo, useState } from 'react';\nimport ContactForm from './ContactForm/ContactForm'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\n\nimport useLocalStorage from './../hooks/useLocalStorage';\n\n\nexport default function App(){\n    const [filter, setFilter] = useState('');\n    const [contacts, setContacts] = useLocalStorage('contacts', [])\n\n    console.log(contacts)\n\n    const findName = (name) => {\n        return contacts.find((contact) => {\n            return contact.name === name\n        })\n    }\n\n    const addContact = (newContact) => {\n        setContacts(prevContacts => ([...prevContacts, newContact] ))\n    }\n\n    const removeContactId = (id) => {\n        setContacts(prevContacts => ([...prevContacts.filter(contact => contact.id !== id)]));\n    }\n\n    // const updateFilter = (filter) =>{\n    //     setFilter(filter);\n    // }\n\n    const filterContacts = useMemo(()=>{\n        return contacts.filter(contact => contact.name.toLowerCase().startsWith(filter.toLowerCase()))\n    }, [filter, contacts])\n\n\n    return (\n        <>   \n            <h2>Phonebook</h2>\n            <ContactForm onFindName={findName} onAddContact ={addContact} />\n\n            <h2>Contacts</h2>\n            <Filter filter={filter} onFilter={(state) => setFilter(state)} />\n            <ContactList contacts={filterContacts} removeContactId={removeContactId}/> \n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App/>, document.querySelector('#root'));\n"],"sourceRoot":""}